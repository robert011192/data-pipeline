[project]
name = "market-data-pipeline"
version = "1.0.0"
description = "ETL pipeline and REST API for market data"
authors = [{name = "Robert"}]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi==0.119.0",
    "uvicorn[standard]==0.37.0",
    "pydantic==2.12.2",
    "pydantic-settings==2.7.1",
    "sqlalchemy==2.0.36",
    "asyncpg==0.30.0",
    "alembic==1.14.0",
    "psycopg2-binary==2.9.10",
    "httpx==0.28.1",
    "aiohttp==3.11.11",
    "pandas==2.2.3",
    "numpy==2.2.1",
    "python-dotenv==1.1.1",
    "structlog==24.4.0",
    "python-json-logger==3.2.1",
    "email-validator==2.2.0",
    "apscheduler==3.10.4",
    "greenlet>=3.2.4",
    "fastapi-pagination>=0.14.3",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.4",
    "pytest-asyncio==0.25.2",
    "pytest-cov==6.0.0",
    "black==24.10.0",
    "ruff==0.8.5",
    "mypy==1.14.0",
    "pre-commit==4.0.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["app"]

[dependency-groups]
dev = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "ruff>=0.8.5",
    "mypy>=1.14.0",
    "pre-commit>=4.0.1",
]

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --cov=app --cov-report=html --cov-report=term-missing"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
